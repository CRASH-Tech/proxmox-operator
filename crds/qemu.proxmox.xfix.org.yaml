kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  name: qemu.proxmox.xfix.org
  labels:
    app: proxmox-operator
  annotations:
spec:
  group: proxmox.xfix.org
  names:
    plural: qemu
    singular: qemu
    kind: Qemu
    listKind: QemuList
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: Server is the Schema for the servers API.
          type: object
          properties:
            apiVersion:
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ServerSpec defines the desired state of Server.
              type: object
              required:
                - accepted
              properties:
                accepted:
                  type: boolean
                  description: >-
                    ObjectReference contains enough information to let you
                    inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its
                    usage when embedded in APIs. 1. Ignored fields.  It includes
                    many fields which are not generally honored.  For instance,
                    ResourceVersion and FieldPath are both very rarely valid in
                    actual usage. 2. Invalid usage help.  It is impossible to
                    add specific help for individual usage.  In most embedded
                    usages, there are particular restrictions like, "must refer
                    only to types A and B" or "UID not honored" or "name must be
                    restricted". Those cannot be well described when embedded.
                    3. Inconsistent validation.  Because the usages are
                    different, the validation rules are different by usage,
                    which makes it hard for users to predict what will happen.
                    4. The fields are both imprecise and overly precise.  Kind
                    is not a precise mapping to a URL. This can produce
                    ambiguity during interpretation and require a REST mapping.
                    In most cases, the dependency is on the group,resource tuple
                    and the version of the actual struct is irrelevant. 5. We
                    cannot easily change it.  Because this type is embedded in
                    many locations, updates to this type will affect numerous
                    schemas.  Don't make new APIs embed an underspecified API
                    type they do not control.
                     Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
                hostname:
                  type: string
                  description: |-
                    PXEMode specifies the method to trigger PXE boot via IPMI.
                     If not set, controller default is used. Valid values: uefi, bios.
                  type: string
                system:
                  type: object
                  properties:
                    family:
                      type: string
                    manufacturer:
                      type: string
                    productName:
                      type: string
                    serialNumber:
                      type: string
                    skuNumber:
                      type: string
                    version:
                      type: string
            status:
              description: ServerStatus defines the observed state of Server.
              type: object
              properties:
                addresses:
                  description: Addresses lists discovered node IPs.
                  type: array
                  items:
                    description: NodeAddress contains information for the node's address.
                    type: object
                    required:
                      - address
                      - type
                    properties:
                      address:
                        description: The node address.
                        type: string
                      type:
                        description: >-
                          Node address type, one of Hostname, ExternalIP or
                          InternalIP.
                        type: string
                conditions:
                  description: Conditions defines current service state of the Server.
                  type: array
                  items:
                    description: >-
                      Condition defines an observation of a Cluster API resource
                      operational state.
                    type: object
                    required:
                      - lastTransitionTime
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: >-
                          Last time the condition transitioned from one status
                          to another. This should be when the underlying
                          condition changed. If that is not known, then using
                          the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: >-
                          A human readable message indicating details about the
                          transition. This field may be empty.
                        type: string
                      reason:
                        description: >-
                          The reason for the condition's last transition in
                          CamelCase. The specific API may choose whether or not
                          this field is considered a guaranteed API. This field
                          may not be empty.
                        type: string
                      severity:
                        description: >-
                          Severity provides an explicit classification of Reason
                          code, so the users or machines can immediately
                          understand the current situation and act accordingly.
                          The Severity field MUST be set only when Status=False.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: >-
                          Type of condition in CamelCase or in
                          foo.example.com/CamelCase. Many .condition.type values
                          are consistent across resources like Available, but
                          because arbitrary conditions can be useful (see
                          .node.status.conditions), the ability to deconflict is
                          important.
                        type: string
                inUse:
                  description: InUse is true when server is assigned to some MetalMachine.
                  type: boolean
                isClean:
                  description: IsClean is true when server disks are wiped.
                  type: boolean
                power:
                  description: >-
                    Power is the current power state of the server: "on", "off"
                    or "unknown".
                  type: string
                ready:
                  description: Ready is true when server is accepted and in use.
                  type: boolean
      subresources:
        status: {}
      additionalPrinterColumns:
        - name: Hostname
          type: string
          description: server hostname
          jsonPath: .spec.hostname
        - name: BMC IP
          type: string
          description: BMC IP
          priority: 1
          jsonPath: .spec.bmc.endpoint
        - name: Accepted
          type: boolean
          description: indicates if the server is accepted
          jsonPath: .spec.accepted
        - name: Cordoned
          type: boolean
          description: indicates if the server is cordoned
          jsonPath: .spec.cordoned
        - name: Allocated
          type: boolean
          description: indicates that the server has been allocated
          jsonPath: .status.inUse
        - name: Clean
          type: boolean
          description: indicates if the server is clean or not
          jsonPath: .status.isClean
        - name: Power
          type: string
          description: display the current power status
          jsonPath: .status.power
        - name: Age
          type: date
          description: The age of this resource
          jsonPath: .metadata.creationTimestamp
  conversion:
    strategy: None
