





func syncQemuDisksStatus(kClient *kuberentes.Client, pClient *proxmox.Client, qemu v1alpha1.Qemu) (v1alpha1.Qemu, error) {
	if !isQemuPlaced(qemu) {
		return qemu, nil
	}

	qemuConfig, err := pClient.Cluster(qemu.Status.Cluster).Node(qemu.Status.Node).Qemu().GetConfig(qemu.Status.VmId)
	if err != nil {
		return qemu, err
	}

	rDiskSize := regexp.MustCompile(`^.+size=(.+),?$`)
	for _, disk := range qemu.Spec.Disk {
		var designStorageConfig proxmox.StorageConfig
		designStorageConfig, err = buildStorageConfig(pClient, qemu)
		if err != nil {
			return qemu, fmt.Errorf("cannot build storage config: %s", err)
		}

		for k, v := range qemuConfig {
			if strings.Contains(fmt.Sprint(v), designStorageConfig.Filename) {
				currentSize := rDiskSize.FindStringSubmatch(fmt.Sprint(v))
				if len(currentSize) != 2 {
					return qemu, fmt.Errorf("cannot extract disk num: %s", disk.Name)
				}
				if designStorageConfig.Size != currentSize[1] {
					err = pClient.Cluster(qemu.Status.Cluster).Node(qemu.Status.Node).Qemu().Resize(qemu.Status.VmId, k, designStorageConfig.Size)
					if err != nil {
						return qemu, fmt.Errorf("cannot resize qemu disk: %s", err)
					}
				}
			}
		}
	}

	return qemu, nil
}


